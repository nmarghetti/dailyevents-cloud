function refreshGroup() { data.groupCode ? (showLoadingMessage(), Parse.Cloud.run("getGroupByCode", { code: data.groupCode }, { success: function (a) { a.id ? (data.groupId = a.id, data.groupName = a.name, ui.labels.title.text(data.groupName), document.title = data.groupName, refreshEvent()) : (data.groupCode = null, disableElements([ui.buttons.refresh, ui.buttons.reply_yes, ui.buttons.reply_no, ui.buttons.add_comment]), showErrorMessage("Unknown group")) }, error: function (a) { hideLoadingMessage(), showNetworkError() } })) : (showErrorMessage("No group parameter"), disableElements([ui.fields.display_name, ui.fields.comment, ui.buttons.refresh, ui.buttons.reply_yes, ui.buttons.reply_no, ui.buttons.add_comment])) } function refreshEvent() { if (data.groupId) { var a = new Date; disableElements([ui.buttons.refresh]), showLoadingMessage("Refreshing event..."), Parse.Cloud.run("getEvent", { groupId: data.groupId, timestamp: a.getTime(), timezone: a.getTimezoneOffset() }, { success: function (a) { refreshStatuses(a.statuses), refreshComments(a.comments), enableElements([ui.buttons.refresh]), hideLoadingMessage() }, error: function (a) { hideLoadingMessage(), showNetworkError(), enableElements([ui.buttons.refresh]) } }) } else refreshGroup() } function refreshStatuses(a) { var b = ui.labels.participants; b.empty(), b.append($("<li/>", { "data-role": "list-divider", text: "Attending today" })); for (var c in a) "yes" == a[c].reply && b.append($("<li/>", { text: a[c].participant })); b.listview("refresh") } function refreshComments(a) { var b = ui.labels.comments; b.empty(), b.append($("<li/>", { "data-role": "list-divider", text: "Comments" })); for (var c in a) { var d = new Date(parseInt(a[c].timestamp)), e = toTwoDigits(d.getHours()) + ":" + toTwoDigits(d.getMinutes()) + " " + a[c].participant, f = $("<li/>", { "data-icon": "false", html: e + ": " + linkify(a[c].comment) }); f.addClass("ui-li-static"), b.append(f) } b.listview("refresh") } function linkify(a) { var b = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi; return a.replace(b, '<a href="$1">$1</a>') } function confirmAttendance() { setStatus("yes") } function cancelAttendance() { setStatus("no") } function setStatus(a) { var b = getDisplayName(); data.groupId ? b ? (disableElements([ui.buttons.reply_yes, ui.buttons.reply_no]), showLoadingMessage("Sending reply..."), Parse.Cloud.run("setStatus", { groupId: data.groupId, participant: getDisplayName(), reply: a, timestamp: getTimestamp(), timezone: getTimezone() }, { success: function (a) { hideLoadingMessage(), refreshEvent(), enableElements([ui.buttons.reply_yes, ui.buttons.reply_no]) }, error: function (a) { hideLoadingMessage(), showNetworkError(), enableElements([ui.buttons.reply_yes, ui.buttons.reply_no]) } })) : showErrorMessage("Enter your display name") : refreshGroup() } function addComment() { var a = getComment(), b = getDisplayName(); data.groupId ? b ? a ? (disableElements([ui.buttons.add_comment]), showLoadingMessage("Adding comment..."), Parse.Cloud.run("addComment", { groupId: data.groupId, participant: getDisplayName(), comment: a, timestamp: getTimestamp(), timezone: getTimezone() }, { success: function (a) { hideLoadingMessage(), ui.fields.comment.val(""), refreshEvent(), enableElements([ui.buttons.add_comment]) }, error: function (a) { hideLoadingMessage(), showNetworkError(), enableElements([ui.buttons.add_comment]) } })) : showErrorMessage("Enter your comment") : showErrorMessage("Enter your display name") : refreshGroup() } function readQueryParameters() { data.groupCode = $.url().param("code"), ui.fields.display_name.val($.url().param("name")) } function enableElements(a) { for (var b in a) a[b].removeClass("ui-disabled") } function disableElements(a) { for (var b in a) a[b].addClass("ui-disabled") } function activateFieldValidation() { var a = [ui.fields.display_name, ui.fields.comment]; for (var b in a) a[b].keydown(checkMaxLength), a[b].keyup(checkMaxLength); a[0].change(checkDisplayName), a[0].keydown(checkDisplayName), a[0].keyup(checkDisplayName) } function checkMaxLength() { var a = $(this).val(), b = $(this).attr("maxlength"); a.length > b && $(this).val(a.substr(0, b)) } function checkDisplayName() { var a = [ui.buttons.reply_yes, ui.buttons.reply_no, ui.buttons.add_comment]; $(this).val().trim() ? enableElements(a) : disableElements(a) } function bindActions() { ui.buttons.refresh.bind("click", refreshEvent), ui.buttons.reply_yes.bind("click", confirmAttendance), ui.buttons.reply_no.bind("click", cancelAttendance), ui.buttons.add_comment.bind("click", addComment), ui.fields.comment.keypress(function (a) { 13 == a.keyCode && (addComment(), a.preventDefault()) }) } function showLoadingMessage(a) { a = a || "Loading...", $.mobile.loading("show", { theme: "a", text: a, textVisible: !0 }) } function hideLoadingMessage() { $.mobile.loading("hide") } function showNetworkError() { showErrorMessage("Network error") } function showErrorMessage(a) { $.mobile.loading("show", { theme: "e", text: a, textVisible: !0 }), setTimeout(hideLoadingMessage, 3e3) } function getDisplayName() { return ui.fields.display_name.val().trim() } function getComment() { return ui.fields.comment.val().trim() } function getTimestamp() { return (new Date).getTime().toString() } function getTimezone() { return (new Date).getTimezoneOffset().toString() } function toTwoDigits(a) { return a < 10 ? "0" + a : a } Parse.initialize("OM6MTeOzj8Y5exBdXTCgCB97JqY1KaVOCFjEvcXJ", "fZeyTsabyz9phwCzXS52a5ABDrorWAleVbpYEIRb", "hzuAv64exUWW6nOqQx0FYq53Kimbwe5T67rstWT6"), Parse.serverURL = "https://parseapi.back4app.com"; var data = {}, ui = { buttons: { refresh: $("#refresh"), reply_yes: $("#reply_yes"), reply_no: $("#reply_no"), add_comment: $("#add_comment") }, fields: { display_name: $("#display_name"), comment: $("#comment") }, labels: { title: $("#title"), participants: $("#participants"), comments: $("#comments") } }; $(document).ready(function () { readQueryParameters(), activateFieldValidation(), bindActions(), refreshGroup() });